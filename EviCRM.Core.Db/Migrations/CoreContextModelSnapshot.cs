// <auto-generated />
using System;
using System.Collections.Generic;
using EviCRM.Core.Db.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EviCRM.Core.Db.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LocalPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NetworkPath")
                        .HasColumnType("text");

                    b.Property<int>("Sender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LocalPath")
                        .HasColumnType("text");

                    b.Property<string>("NetworkPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid?>>("Attachments")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInOffice")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("boolean");

                    b.Property<int>("NotifyPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VisualCalendarTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VisualCalendarTypeId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.CalendarVisual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalendarId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ForeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CalendarVisual");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Head")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Head")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Avatar")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Cast")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid?>("Head")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Health", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("HttpCode")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Health");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.KeyStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value1")
                        .HasColumnType("text");

                    b.Property<string>("Value2")
                        .HasColumnType("text");

                    b.Property<string>("Value3")
                        .HasColumnType("text");

                    b.Property<string>("Value4")
                        .HasColumnType("text");

                    b.Property<string>("Value5")
                        .HasColumnType("text");

                    b.Property<string>("Value6")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("KeyStore");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Markdown.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackColorHex")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeskBoundId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskBoundId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeskBoundId");

                    b.HasIndex("TaskBoundId");

                    b.HasIndex("TitleImageId");

                    b.ToTable("MarkdownCard");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Markdown.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PersonalBoundId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskBoundId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonalBoundId");

                    b.HasIndex("TaskBoundId");

                    b.ToTable("MarkdownDesk");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Markdown.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardBoundId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MarkEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskBoundId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CardBoundId");

                    b.HasIndex("TaskBoundId");

                    b.ToTable("MarkdownTodo");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("DivisionsMentioned")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NewsAvatarId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Tags")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NewsAvatarId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.NewsCat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("NewsCat");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.NewsComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InReply")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NewsBoundId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsBoundId");

                    b.HasIndex("ReplyCommentId");

                    b.HasIndex("SenderId");

                    b.ToTable("NewsComment");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.NewsTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("NewsTag");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.PersonalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoundTaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BoundTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonalStatus");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("BoundTasks")
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("Cast")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("DivCast")
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("EndProject")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartProject")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BasedOnRole")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Attachments")
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Budget")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Divisions")
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FactEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("boolean");

                    b.Property<List<Guid>>("Members")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("PersonalStatusCollection")
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("ProjectsBound")
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("ResponsibleMembers")
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.TaskTracking.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InReplyCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceEventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SourceEventId");

                    b.ToTable("TaskTrackingComment");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.TaskTracking.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CardBoundId")
                        .HasColumnType("uuid");

                    b.Property<int>("Command")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskBoundId")
                        .HasColumnType("uuid");

                    b.Property<string>("Variable1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Variable2")
                        .HasColumnType("text");

                    b.Property<string>("Variable3")
                        .HasColumnType("text");

                    b.Property<string>("Variable4")
                        .HasColumnType("text");

                    b.Property<string>("Variable5")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CardBoundId");

                    b.HasIndex("TaskBoundId");

                    b.ToTable("TaskTrackingEvent");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Telegram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Telegram");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.TelegramPush", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TelegramPush");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExperienceS1")
                        .HasColumnType("text");

                    b.Property<string>("ExperienceS2")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Revenue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Skills")
                        .HasColumnType("uuid[]");

                    b.Property<Guid?>("TelegramId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThinClientUsing")
                        .HasColumnType("text");

                    b.Property<string>("TimeToken")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<double?>("TotalRevenue")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("NewsId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TelegramId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.WorkingDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndWork")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartWork")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SubjectUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WhenInserted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("WhenUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WhoInserted")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhoUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectUserId");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Calendar", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.CalendarVisual", "VisualCalendarType")
                        .WithMany()
                        .HasForeignKey("VisualCalendarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisualCalendarType");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Chat", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Company", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Department", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Map", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Markdown.Card", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Markdown.Desk", "DeskBound")
                        .WithMany()
                        .HasForeignKey("DeskBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Task", "TaskBound")
                        .WithMany()
                        .HasForeignKey("TaskBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Attachment", "TitleImage")
                        .WithMany()
                        .HasForeignKey("TitleImageId");

                    b.Navigation("DeskBound");

                    b.Navigation("TaskBound");

                    b.Navigation("TitleImage");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Markdown.Desk", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "PersonalBound")
                        .WithMany()
                        .HasForeignKey("PersonalBoundId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Task", "TaskBound")
                        .WithMany()
                        .HasForeignKey("TaskBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalBound");

                    b.Navigation("TaskBound");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Markdown.Todo", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Markdown.Card", "CardBound")
                        .WithMany()
                        .HasForeignKey("CardBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Task", "TaskBound")
                        .WithMany()
                        .HasForeignKey("TaskBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardBound");

                    b.Navigation("TaskBound");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.News", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.NewsCat", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Avatar", "NewsAvatar")
                        .WithMany()
                        .HasForeignKey("NewsAvatarId");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("NewsAvatar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.NewsComment", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.News", "NewsBound")
                        .WithMany()
                        .HasForeignKey("NewsBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.NewsComment", "ReplyComment")
                        .WithMany()
                        .HasForeignKey("ReplyCommentId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsBound");

                    b.Navigation("ReplyComment");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.PersonalStatus", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Task", "BoundTask")
                        .WithMany()
                        .HasForeignKey("BoundTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoundTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Position", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.Navigation("Company");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Project", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.Task", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.TaskTracking.Comment", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.TaskTracking.Event", "SourceEvent")
                        .WithMany()
                        .HasForeignKey("SourceEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("SourceEvent");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.TaskTracking.Event", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Markdown.Card", "CardBound")
                        .WithMany()
                        .HasForeignKey("CardBoundId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Task", "TaskBound")
                        .WithMany()
                        .HasForeignKey("TaskBoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CardBound");

                    b.Navigation("TaskBound");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.TelegramPush", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.User", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.News", null)
                        .WithMany("UsersMentioned")
                        .HasForeignKey("NewsId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EviCRM.Core.Db.Entities.Core.Telegram", "Telegram")
                        .WithMany()
                        .HasForeignKey("TelegramId");

                    b.Navigation("Avatar");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("Telegram");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.WorkingDays", b =>
                {
                    b.HasOne("EviCRM.Core.Db.Entities.Core.User", "SubjectUser")
                        .WithMany()
                        .HasForeignKey("SubjectUserId");

                    b.Navigation("SubjectUser");
                });

            modelBuilder.Entity("EviCRM.Core.Db.Entities.Core.News", b =>
                {
                    b.Navigation("UsersMentioned");
                });
#pragma warning restore 612, 618
        }
    }
}
